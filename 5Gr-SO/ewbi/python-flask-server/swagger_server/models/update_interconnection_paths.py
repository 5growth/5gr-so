# Author: Jordi Baranda
# Copyright (C) 2020 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.key_value_pair import KeyValuePair  # noqa: F401,E501
from swagger_server import util


class UpdateInterconnectionPaths(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nsd_id: str=None, connected_vn_fs_add: KeyValuePair=None, connected_vn_fs_del: KeyValuePair=None, link_char: KeyValuePair=None):  # noqa: E501
        """UpdateInterconnectionPaths - a model defined in Swagger

        :param nsd_id: The nsd_id of this UpdateInterconnectionPaths.  # noqa: E501
        :type nsd_id: str
        :param connected_vn_fs_add: The connected_vn_fs_add of this UpdateInterconnectionPaths.  # noqa: E501
        :type connected_vn_fs_add: KeyValuePair
        :param connected_vn_fs_del: The connected_vn_fs_del of this UpdateInterconnectionPaths.  # noqa: E501
        :type connected_vn_fs_del: KeyValuePair
        :param link_char: The link_char of this UpdateInterconnectionPaths.  # noqa: E501
        :type link_char: KeyValuePair
        """
        self.swagger_types = {
            'nsd_id': str,
            'connected_vn_fs_add': KeyValuePair,
            'connected_vn_fs_del': KeyValuePair,
            'link_char': KeyValuePair
        }

        self.attribute_map = {
            'nsd_id': 'nsdId',
            'connected_vn_fs_add': 'connectedVNFs_add',
            'connected_vn_fs_del': 'connectedVNFs_del',
            'link_char': 'linkChar'
        }

        self._nsd_id = nsd_id
        self._connected_vn_fs_add = connected_vn_fs_add
        self._connected_vn_fs_del = connected_vn_fs_del
        self._link_char = link_char

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateInterconnectionPaths':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateInterconnectionPaths of this UpdateInterconnectionPaths.  # noqa: E501
        :rtype: UpdateInterconnectionPaths
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nsd_id(self) -> str:
        """Gets the nsd_id of this UpdateInterconnectionPaths.


        :return: The nsd_id of this UpdateInterconnectionPaths.
        :rtype: str
        """
        return self._nsd_id

    @nsd_id.setter
    def nsd_id(self, nsd_id: str):
        """Sets the nsd_id of this UpdateInterconnectionPaths.


        :param nsd_id: The nsd_id of this UpdateInterconnectionPaths.
        :type nsd_id: str
        """
        if nsd_id is None:
            raise ValueError("Invalid value for `nsd_id`, must not be `None`")  # noqa: E501

        self._nsd_id = nsd_id

    @property
    def connected_vn_fs_add(self) -> KeyValuePair:
        """Gets the connected_vn_fs_add of this UpdateInterconnectionPaths.


        :return: The connected_vn_fs_add of this UpdateInterconnectionPaths.
        :rtype: KeyValuePair
        """
        return self._connected_vn_fs_add

    @connected_vn_fs_add.setter
    def connected_vn_fs_add(self, connected_vn_fs_add: KeyValuePair):
        """Sets the connected_vn_fs_add of this UpdateInterconnectionPaths.


        :param connected_vn_fs_add: The connected_vn_fs_add of this UpdateInterconnectionPaths.
        :type connected_vn_fs_add: KeyValuePair
        """
        if connected_vn_fs_add is None:
            raise ValueError("Invalid value for `connected_vn_fs_add`, must not be `None`")  # noqa: E501

        self._connected_vn_fs_add = connected_vn_fs_add

    @property
    def connected_vn_fs_del(self) -> KeyValuePair:
        """Gets the connected_vn_fs_del of this UpdateInterconnectionPaths.


        :return: The connected_vn_fs_del of this UpdateInterconnectionPaths.
        :rtype: KeyValuePair
        """
        return self._connected_vn_fs_del

    @connected_vn_fs_del.setter
    def connected_vn_fs_del(self, connected_vn_fs_del: KeyValuePair):
        """Sets the connected_vn_fs_del of this UpdateInterconnectionPaths.


        :param connected_vn_fs_del: The connected_vn_fs_del of this UpdateInterconnectionPaths.
        :type connected_vn_fs_del: KeyValuePair
        """
        if connected_vn_fs_del is None:
            raise ValueError("Invalid value for `connected_vn_fs_del`, must not be `None`")  # noqa: E501

        self._connected_vn_fs_del = connected_vn_fs_del

    @property
    def link_char(self) -> KeyValuePair:
        """Gets the link_char of this UpdateInterconnectionPaths.


        :return: The link_char of this UpdateInterconnectionPaths.
        :rtype: KeyValuePair
        """
        return self._link_char

    @link_char.setter
    def link_char(self, link_char: KeyValuePair):
        """Sets the link_char of this UpdateInterconnectionPaths.


        :param link_char: The link_char of this UpdateInterconnectionPaths.
        :type link_char: KeyValuePair
        """
        if link_char is None:
            raise ValueError("Invalid value for `link_char`, must not be `None`")  # noqa: E501

        self._link_char = link_char
