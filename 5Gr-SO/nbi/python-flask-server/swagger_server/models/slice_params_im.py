# Author: Jordi Baranda
# Copyright (C) 2020 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SliceParamsIm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, exp_data_rate_dl: int=None, exp_data_rate_ul: int=None, area_traffic_cap_dl: int=None, area_traffic_cap_ul: int=None, user_density: int=None, activity_factor: int=None, u_e_speed: int=None, coverage: str=None, e2e_latency: int=None, jitter: int=None, survival_time: int=None, c_s_availability: float=None, reliability: float=None, exp_data_rate: int=None, payloadsize: int=None, traffic_density: int=None, conn_density: int=None, service_area_dimension: str=None):  # noqa: E501
        """SliceParamsIm - a model defined in Swagger

        :param exp_data_rate_dl: The exp_data_rate_dl of this SliceParamsIm.  # noqa: E501
        :type exp_data_rate_dl: int
        :param exp_data_rate_ul: The exp_data_rate_ul of this SliceParamsIm.  # noqa: E501
        :type exp_data_rate_ul: int
        :param area_traffic_cap_dl: The area_traffic_cap_dl of this SliceParamsIm.  # noqa: E501
        :type area_traffic_cap_dl: int
        :param area_traffic_cap_ul: The area_traffic_cap_ul of this SliceParamsIm.  # noqa: E501
        :type area_traffic_cap_ul: int
        :param user_density: The user_density of this SliceParamsIm.  # noqa: E501
        :type user_density: int
        :param activity_factor: The activity_factor of this SliceParamsIm.  # noqa: E501
        :type activity_factor: int
        :param u_e_speed: The u_e_speed of this SliceParamsIm.  # noqa: E501
        :type u_e_speed: int
        :param coverage: The coverage of this SliceParamsIm.  # noqa: E501
        :type coverage: str
        :param e2e_latency: The e2e_latency of this SliceParamsIm.  # noqa: E501
        :type e2e_latency: int
        :param jitter: The jitter of this SliceParamsIm.  # noqa: E501
        :type jitter: int
        :param survival_time: The survival_time of this SliceParamsIm.  # noqa: E501
        :type survival_time: int
        :param c_s_availability: The c_s_availability of this SliceParamsIm.  # noqa: E501
        :type c_s_availability: float
        :param reliability: The reliability of this SliceParamsIm.  # noqa: E501
        :type reliability: float
        :param exp_data_rate: The exp_data_rate of this SliceParamsIm.  # noqa: E501
        :type exp_data_rate: int
        :param payloadsize: The payloadsize of this SliceParamsIm.  # noqa: E501
        :type payloadsize: int
        :param traffic_density: The traffic_density of this SliceParamsIm.  # noqa: E501
        :type traffic_density: int
        :param conn_density: The conn_density of this SliceParamsIm.  # noqa: E501
        :type conn_density: int
        :param service_area_dimension: The service_area_dimension of this SliceParamsIm.  # noqa: E501
        :type service_area_dimension: str
        """
        self.swagger_types = {
            "exp_data_rate_dl": int,
            "exp_data_rate_ul": int,
            "area_traffic_cap_dl": int,
            "area_traffic_cap_ul": int,
            "user_density": int,
            "activity_factor": int,
            "u_e_speed": int,
            "coverage": str,
            "e2e_latency": int,
            "jitter": int,
            "survival_time": int,
            "c_s_availability": float,
            "reliability": float,
            "exp_data_rate": int,
            "payloadsize": int,
            "traffic_density": int,
            "conn_density": int,
            "service_area_dimension": str
        }

        self.attribute_map = {
            "exp_data_rate_dl": "expDataRateDL",
            "exp_data_rate_ul": "expDataRateUL",
            "area_traffic_cap_dl": "areaTrafficCapDL",
            "area_traffic_cap_ul": "areaTrafficCapUL",
            "user_density": "userDensity",
            "activity_factor": "activityFactor",
            "u_e_speed": "uESpeed",
            "coverage": "coverage",
            "e2e_latency": "e2eLatency",
            "jitter": "jitter",
            "survival_time": "survivalTime",
            "c_s_availability": "cSAvailability",
            "reliability": "reliability",
            "exp_data_rate": "expDataRate",
            "payloadsize": "payloadsize",
            "traffic_density": "trafficDensity",
            "conn_density": "connDensity",
            "service_area_dimension": "serviceAreaDimension"
        }

        self._exp_data_rate_dl = exp_data_rate_dl
        self._exp_data_rate_ul = exp_data_rate_ul
        self._area_traffic_cap_dl = area_traffic_cap_dl
        self._area_traffic_cap_ul = area_traffic_cap_ul
        self._user_density = user_density
        self._activity_factor = activity_factor
        self._u_e_speed = u_e_speed
        self._coverage = coverage
        self._e2e_latency = e2e_latency
        self._jitter = jitter
        self._survival_time = survival_time
        self._c_s_availability = c_s_availability
        self._reliability = reliability
        self._exp_data_rate = exp_data_rate
        self._payloadsize = payloadsize
        self._traffic_density = traffic_density
        self._conn_density = conn_density
        self._service_area_dimension = service_area_dimension

    @classmethod
    def from_dict(cls, dikt) -> "SliceParamsIm":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sliceParams_im of this SliceParamsIm.  # noqa: E501
        :rtype: SliceParamsIm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exp_data_rate_dl(self) -> int:
        """Gets the exp_data_rate_dl of this SliceParamsIm.


        :return: The exp_data_rate_dl of this SliceParamsIm.
        :rtype: int
        """
        return self._exp_data_rate_dl

    @exp_data_rate_dl.setter
    def exp_data_rate_dl(self, exp_data_rate_dl: int):
        """Sets the exp_data_rate_dl of this SliceParamsIm.


        :param exp_data_rate_dl: The exp_data_rate_dl of this SliceParamsIm.
        :type exp_data_rate_dl: int
        """

        self._exp_data_rate_dl = exp_data_rate_dl

    @property
    def exp_data_rate_ul(self) -> int:
        """Gets the exp_data_rate_ul of this SliceParamsIm.


        :return: The exp_data_rate_ul of this SliceParamsIm.
        :rtype: int
        """
        return self._exp_data_rate_ul

    @exp_data_rate_ul.setter
    def exp_data_rate_ul(self, exp_data_rate_ul: int):
        """Sets the exp_data_rate_ul of this SliceParamsIm.


        :param exp_data_rate_ul: The exp_data_rate_ul of this SliceParamsIm.
        :type exp_data_rate_ul: int
        """

        self._exp_data_rate_ul = exp_data_rate_ul

    @property
    def area_traffic_cap_dl(self) -> int:
        """Gets the area_traffic_cap_dl of this SliceParamsIm.


        :return: The area_traffic_cap_dl of this SliceParamsIm.
        :rtype: int
        """
        return self._area_traffic_cap_dl

    @area_traffic_cap_dl.setter
    def area_traffic_cap_dl(self, area_traffic_cap_dl: int):
        """Sets the area_traffic_cap_dl of this SliceParamsIm.


        :param area_traffic_cap_dl: The area_traffic_cap_dl of this SliceParamsIm.
        :type area_traffic_cap_dl: int
        """

        self._area_traffic_cap_dl = area_traffic_cap_dl

    @property
    def area_traffic_cap_ul(self) -> int:
        """Gets the area_traffic_cap_ul of this SliceParamsIm.


        :return: The area_traffic_cap_ul of this SliceParamsIm.
        :rtype: int
        """
        return self._area_traffic_cap_ul

    @area_traffic_cap_ul.setter
    def area_traffic_cap_ul(self, area_traffic_cap_ul: int):
        """Sets the area_traffic_cap_ul of this SliceParamsIm.


        :param area_traffic_cap_ul: The area_traffic_cap_ul of this SliceParamsIm.
        :type area_traffic_cap_ul: int
        """

        self._area_traffic_cap_ul = area_traffic_cap_ul

    @property
    def user_density(self) -> int:
        """Gets the user_density of this SliceParamsIm.


        :return: The user_density of this SliceParamsIm.
        :rtype: int
        """
        return self._user_density

    @user_density.setter
    def user_density(self, user_density: int):
        """Sets the user_density of this SliceParamsIm.


        :param user_density: The user_density of this SliceParamsIm.
        :type user_density: int
        """

        self._user_density = user_density

    @property
    def activity_factor(self) -> int:
        """Gets the activity_factor of this SliceParamsIm.


        :return: The activity_factor of this SliceParamsIm.
        :rtype: int
        """
        return self._activity_factor

    @activity_factor.setter
    def activity_factor(self, activity_factor: int):
        """Sets the activity_factor of this SliceParamsIm.


        :param activity_factor: The activity_factor of this SliceParamsIm.
        :type activity_factor: int
        """

        self._activity_factor = activity_factor

    @property
    def u_e_speed(self) -> int:
        """Gets the u_e_speed of this SliceParamsIm.


        :return: The u_e_speed of this SliceParamsIm.
        :rtype: int
        """
        return self._u_e_speed

    @u_e_speed.setter
    def u_e_speed(self, u_e_speed: int):
        """Sets the u_e_speed of this SliceParamsIm.


        :param u_e_speed: The u_e_speed of this SliceParamsIm.
        :type u_e_speed: int
        """

        self._u_e_speed = u_e_speed

    @property
    def coverage(self) -> str:
        """Gets the coverage of this SliceParamsIm.


        :return: The coverage of this SliceParamsIm.
        :rtype: str
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage: str):
        """Sets the coverage of this SliceParamsIm.


        :param coverage: The coverage of this SliceParamsIm.
        :type coverage: str
        """

        self._coverage = coverage

    @property
    def e2e_latency(self) -> int:
        """Gets the e2e_latency of this SliceParamsIm.


        :return: The e2e_latency of this SliceParamsIm.
        :rtype: int
        """
        return self._e2e_latency

    @e2e_latency.setter
    def e2e_latency(self, e2e_latency: int):
        """Sets the e2e_latency of this SliceParamsIm.


        :param e2e_latency: The e2e_latency of this SliceParamsIm.
        :type e2e_latency: int
        """

        self._e2e_latency = e2e_latency

    @property
    def jitter(self) -> int:
        """Gets the jitter of this SliceParamsIm.


        :return: The jitter of this SliceParamsIm.
        :rtype: int
        """
        return self._jitter

    @jitter.setter
    def jitter(self, jitter: int):
        """Sets the jitter of this SliceParamsIm.


        :param jitter: The jitter of this SliceParamsIm.
        :type jitter: int
        """

        self._jitter = jitter

    @property
    def survival_time(self) -> int:
        """Gets the survival_time of this SliceParamsIm.


        :return: The survival_time of this SliceParamsIm.
        :rtype: int
        """
        return self._survival_time

    @survival_time.setter
    def survival_time(self, survival_time: int):
        """Sets the survival_time of this SliceParamsIm.


        :param survival_time: The survival_time of this SliceParamsIm.
        :type survival_time: int
        """

        self._survival_time = survival_time

    @property
    def c_s_availability(self) -> float:
        """Gets the c_s_availability of this SliceParamsIm.


        :return: The c_s_availability of this SliceParamsIm.
        :rtype: float
        """
        return self._c_s_availability

    @c_s_availability.setter
    def c_s_availability(self, c_s_availability: float):
        """Sets the c_s_availability of this SliceParamsIm.


        :param c_s_availability: The c_s_availability of this SliceParamsIm.
        :type c_s_availability: float
        """

        self._c_s_availability = c_s_availability

    @property
    def reliability(self) -> float:
        """Gets the reliability of this SliceParamsIm.


        :return: The reliability of this SliceParamsIm.
        :rtype: float
        """
        return self._reliability

    @reliability.setter
    def reliability(self, reliability: float):
        """Sets the reliability of this SliceParamsIm.


        :param reliability: The reliability of this SliceParamsIm.
        :type reliability: float
        """

        self._reliability = reliability

    @property
    def exp_data_rate(self) -> int:
        """Gets the exp_data_rate of this SliceParamsIm.


        :return: The exp_data_rate of this SliceParamsIm.
        :rtype: int
        """
        return self._exp_data_rate

    @exp_data_rate.setter
    def exp_data_rate(self, exp_data_rate: int):
        """Sets the exp_data_rate of this SliceParamsIm.


        :param exp_data_rate: The exp_data_rate of this SliceParamsIm.
        :type exp_data_rate: int
        """

        self._exp_data_rate = exp_data_rate

    @property
    def payloadsize(self) -> int:
        """Gets the payloadsize of this SliceParamsIm.


        :return: The payloadsize of this SliceParamsIm.
        :rtype: int
        """
        return self._payloadsize

    @payloadsize.setter
    def payloadsize(self, payloadsize: int):
        """Sets the payloadsize of this SliceParamsIm.


        :param payloadsize: The payloadsize of this SliceParamsIm.
        :type payloadsize: int
        """

        self._payloadsize = payloadsize

    @property
    def traffic_density(self) -> int:
        """Gets the traffic_density of this SliceParamsIm.


        :return: The traffic_density of this SliceParamsIm.
        :rtype: int
        """
        return self._traffic_density

    @traffic_density.setter
    def traffic_density(self, traffic_density: int):
        """Sets the traffic_density of this SliceParamsIm.


        :param traffic_density: The traffic_density of this SliceParamsIm.
        :type traffic_density: int
        """

        self._traffic_density = traffic_density

    @property
    def conn_density(self) -> int:
        """Gets the conn_density of this SliceParamsIm.


        :return: The conn_density of this SliceParamsIm.
        :rtype: int
        """
        return self._conn_density

    @conn_density.setter
    def conn_density(self, conn_density: int):
        """Sets the conn_density of this SliceParamsIm.


        :param conn_density: The conn_density of this SliceParamsIm.
        :type conn_density: int
        """

        self._conn_density = conn_density

    @property
    def service_area_dimension(self) -> str:
        """Gets the service_area_dimension of this SliceParamsIm.


        :return: The service_area_dimension of this SliceParamsIm.
        :rtype: str
        """
        return self._service_area_dimension

    @service_area_dimension.setter
    def service_area_dimension(self, service_area_dimension: str):
        """Sets the service_area_dimension of this SliceParamsIm.


        :param service_area_dimension: The service_area_dimension of this SliceParamsIm.
        :type service_area_dimension: str
        """

        self._service_area_dimension = service_area_dimension
